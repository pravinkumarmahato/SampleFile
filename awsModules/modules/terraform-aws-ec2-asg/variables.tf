variable "tags" {
  description = "Please reference the current tagging policy for required tags and allowed values.  See README for link to policy."
  type        = map(string)
}

variable "asg_name" {
  description = "A name for the ASG that will be rendered and used to name all deployed resources."
  type        = string
}

variable "lt_name" {
  description = "A name for the ASG's launch template. This name will be interpolated into the ASG so they are tied together for all TF operations."
  type        = string
}

variable "keypair_public_key" {
  description = "Public key to be used for guest OS authentication.  This can be generated by 'puttygen on Windows' or 'ssh-keygen on macOS/Linux'. The SSH2 Public Key needs to be converted into an OpenSSH Public Key format RFC4716 which is the required format for this input. On Windows, use puttygen to Load your new private key, then copy the ssh-rsa public key string from the text box at the top of the window. Use 'ssh-keygen Conversion' to convert to an ssh-rsa string."
  type        = string
  default     = null
}

variable "key_name" {
  description = "The key name of an existing Key Pair to use for the instance(s). Only use if 'keypair_public_key' is not supplied. Useful when sharing a Key Pair across multiple instances/deployments."
  type        = string
  default     = null
}

variable "user_data" {
  description = "The user data to provide when launching the instance."
  type        = string
  default     = ""
}

variable "ami_id" {
  description = "The AMI ID to use in this scale set"
  type        = string
}

variable "vpc_type" {
  description = "The type of vpc to deploy into.  Based on the 'Name' tag on the VPC.  This is case sensitive!"
  type        = string
}

variable "subnet_type" {
  description = "The type of subnet to use based on the 'Name' tag on the subnet.  This will return a map of all subnets (AZs) matching the specified filter.  Example: 'PrivateStatic', 'PrivateDynamic'"
  type        = string
}

variable "instance_type" {
  description = "The type of instance to deploy.  Example: 't2.small', 'm5.large', 'c4.xlarge'. See related links for 'AWS Instance Types'."
  type        = string
}

variable "security_groups" {
  description = "A list of existing security groups to attach this instance to.  If specified, no security group will be created as part of this module."
  type        = list(string)
  default     = null
}

variable "enable_monitoring" {
  description = "Enables/disables detailed monitoring."
  type        = bool
  default     = true
}

variable "ebs_optimized" {
  description = "Whether or not EBS optimization is needed"
  type        = bool
  default     = false
}

variable "iam_instance_profile" {
  description = "The IAM Instance Profile to launch the instance with. Specified as the Name of the Instance Profile (not the ARN). Ensure your credentials have the correct permission to assign the instance profile according to the EC2 documentation, notably 'iam:PassRole'."
  type        = string
  default     = null
}

variable "desired_capacity" {
  description = "The number of Amazon EC2 instances that should be running in the group."
  type        = string
}

variable "max_size" {
  description = "The maximum size of the auto scale group."
  type        = string
}

variable "min_size" {
  description = "The minimum size of the auto scale group."
  type        = string
}

variable "default_cooldown" {
  description = "The amount of time, in seconds, after a scaling activity completes before another scaling activity can start."
  type        = number
  default     = 300
}

variable "placement_group" {
  description = "The name of the placement group into which you'll launch your instances, if any."
  type        = string
  default     = null
}

variable "load_balancers" {
  description = "A list of elastic load balancer names to add to the autoscaling group names. Only valid for classic load balancers (ELB). For ALBs, use 'target_group_arns' instead."
  type        = list(string)
  default     = []
}

variable "target_group_arns" {
  description = "A list of 'aws_alb_target_group' ARNs, for use with Application or Network Load Balancing."
  type        = list(string)
  default     = []
}

variable "enabled_metrics" {
  description = "A list of metrics to collect. The allowed values are 'GroupDesiredCapacity', 'GroupInServiceCapacity', 'GroupPendingCapacity', 'GroupMinSize', 'GroupMaxSize', 'GroupInServiceInstances', 'GroupPendingInstances', 'GroupStandbyInstances', 'GroupStandbyCapacity', 'GroupTerminatingCapacity', 'GroupTerminatingInstances', 'GroupTotalCapacity', 'GroupTotalInstances'."
  type        = list(string)
  default = [
    "GroupDesiredCapacity", "GroupInServiceCapacity", "GroupPendingCapacity", "GroupMinSize", "GroupMaxSize",
    "GroupInServiceInstances", "GroupPendingInstances", "GroupStandbyInstances", "GroupStandbyCapacity",
    "GroupTerminatingCapacity", "GroupTerminatingInstances", "GroupTotalCapacity", "GroupTotalInstances"
  ]
}

variable "health_check_grace_period" {
  description = "Time (in seconds) after instance comes into service before checking health."
  type        = number
  default     = 300
}

variable "health_check_type" {
  description = "'EC2 or 'ELB'. Controls how health checking is done."
  type        = string
  default     = "EC2"
}

variable "wait_for_capacity_timeout" {
  description = "maximum duration that Terraform should wait for ASG instances to be healthy before timing out. Setting this to '0' causes Terraform to skip all Capacity Waiting behavior."
  type        = string
  default     = "10m"
}

variable "termination_policies" {
  description = "A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are 'OldestInstance', 'NewestInstance', 'OldestLaunchConfiguration', 'ClosestToNextInstanceHour', 'OldestLaunchTemplate', 'AllocationStrategy', 'Default'."
  type        = list(string)
  default     = []
}

variable "suspended_processes" {
  description = "A list of processes to suspend for the AutoScaling Group. The allowed values are 'Launch', 'Terminate', 'HealthCheck', 'ReplaceUnhealthy', 'AZRebalance', 'AlarmNotification', 'ScheduledActions', 'AddToLoadBalancer'. Note that if you suspend either the 'Launch' or 'Terminate' process types, it can prevent your autoscaling group from functioning properly."
  type        = list(string)
  default     = []
}

variable "min_elb_capacity" {
  description = "Setting this causes Terraform to wait for this number of instances from this autoscaling group to show up healthy in the ELB only on creation. Updates will not wait on ELB instance number changes."
  type        = string
  default     = null
}

variable "wait_for_elb_capacity" {
  description = "Setting this will cause Terraform to wait for exactly this number of healthy instances from this autoscaling group in all attached load balancers on both create and update operations. (Takes precedence over 'min_elb_capacity' behavior.)"
  type        = string
  default     = null
}

variable "protect_from_scale_in" {
  description = "Allows setting instance protection. The autoscaling group will not select instances with this setting for terminination during scale in events."
  type        = string
  default     = false
}

variable "max_instance_lifetime" {
  description = "The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to '0' or between '604800' and '31536000' seconds."
  type        = string
  default     = null
}

variable "ingress_rules" {
  description = "See object specific arguments in the README."
  type = map(object({
    from_port       = string
    to_port         = string
    protocol        = string
    cidr_blocks     = list(string)
    security_groups = list(string)
    description     = string
    self            = bool
  }))
  default = {}
}

variable "egress_rules" {
  description = "See object specific arguments in the README."
  type = map(object({
    from_port       = string
    to_port         = string
    protocol        = string
    cidr_blocks     = list(string)
    security_groups = list(string)
    description     = string
    self            = bool
  }))
  default = {}
}

variable "block_device_mappings" {
  description = "Specify volumes to attach to the instance besides the volumes specified by the AMI"

  type = map(object({
    device_name  = string
    no_device    = optional(bool)
    virtual_name = optional(string)
    ebs = object({
      delete_on_termination = bool
      encrypted             = bool
      iops                  = optional(number)
      kms_key_id            = optional(string)
      snapshot_id           = optional(string)
      volume_size           = number
      volume_type           = string
    })
  }))

  default = {}
}



variable "disable_api_termination" {
  type        = bool
  description = "If `true`, enables EC2 Instance Termination Protection"
  default     = true
}

variable "tag_specifications_resource_types" {
  type        = set(string)
  default     = ["instance", "volume"]
  description = "List of tag specification resource types to tag. Valid values are instance, volume, elastic-gpu and spot-instances-request."
}

variable "server_admin_group" {
  description = "The group that will need admin rights to the system.  Must be sepcified as 'GROUP@domain'."
  type        = string
  default     = "US_INF-GEP-CloudAdmins@us.cbre.net"

  validation {
    condition     = can(regex("^([^\\\\]+)@([^\\\\]+)$", var.server_admin_group))
    error_message = "The server_admin_group must be specified as 'GROUP@domain' (ex. group_name@us.cbre.net)."
  }
}

variable "server_domain" {
  description = "The domain with which to join."
  type        = string
  default     = "US"

  validation {
    condition = contains(
      [
        "US",
        "AP",
        "EMEA",
        "TND",
        "CLARION",
        "CA"
      ],
      var.server_domain
    )

    error_message = "The server_domain must be one of ['US', 'AP', 'EMEA', 'TND', 'CLARION', 'CA']."
  }
}

variable "role_name" {
  description = "The role of the server.  Allowed values are 'General_Linux"
  type        = string

  validation {
    condition = contains(
      [
        "General_Linux",
        "CloudEng"
      ],
      var.role_name
    )

    error_message = "The 'role_name' must be one of ['General_Linux', 'CloudEng]."
  }
}

variable "instance_initiated_shutdown_behavior" {
  description = "Shutdown behavior for the instance"
  type        = string
  default     = "stop"
}
